#ifndef MAIN_MEMORY
#define MAIN_MEMORY

#include "stdlib.msim"

module main_memory extends typical_memory:
parameters
	memory_size initially 4GB;
	words_per_block initially 128;
	blocks_per_page initially 1024;
	write_access_latency initially 121ns;
	read_access_latency initially 121ns;
	write_access_energy initially 2pJ;
	read_access_energy initially 2pJ;
	pages_per_bank initially memory_size/blocks_per_page/words_per_block;
definitions
	const b = log2(words_per_block);
	const p = log2(blocks_per_page);
	const k = log2(pages_per_bank);
architecture
	record bank[inf]
		record page[pages_per_bank]
			record block[blocks_per_page]
				_data word[words_per_block];
			end;
		end;
		double write_waiting_time=0;
	end;
fields
	field word from 0 to b-1;
	field block from b to b+p-1;
	field page from b+p to b+p+k-1;
	field bank from b+p+k to end;
implementation
	function wait_for_resource(_address addr): double {
		double epoch = bank[addr@bank].write_waiting_time;
		if(elapsed_time() < epoch) {
			bank[addr@bank].write_waiting_time = 0;
			return epoch-elapsed_time();
		}
		return 0;
	}
	procedure evaluate_waiting_time(_address addr, double write_latency) {
		double epoch = bank[addr@bank].write_waiting_time;
		if(elapsed_time()<epoch) { 
			epoch -= elapsed_time();
		} else 
			epoch = 0;
		bank[addr@bank].write_waiting_time = elapsed_time()+epoch+write_latency;
	}
	procedure read_block(_address addr, _data* dst_block, uint32 size) serial
	~latency(wait_for_resource(addr)+read_access_latency) ~energy(read_access_energy) {
		trace("Memory read access at %llX", addr);
		uint16 start = addr@word;
		for (uint32 i = 0; i < size; i++) {
			dst_block[i] = bank[addr@bank].page[addr@page].block[addr@block].word[start+i];
		}
	}
	procedure write_block(_address addr, _data* src_block, uint32 size) serial
	~latency(1ns) ~energy(write_access_energy) {
		trace("memory write access at %llX", addr);
		if(sim_step >= offset) 
			evaluate_waiting_time(addr, wait_for_resource(addr)+write_access_latency);
		uint16 start = addr@word;
		for (uint32 i = 0; i < size; i++) {
			bank[addr@bank].page[addr@page].block[addr@block].word[start+i] = src_block[i];
		}
	}
	procedure set_data(_address addr, _data d) {
		bank[addr@bank].page[addr@page].block[addr@block].word[addr@word] = d;
	}
	function block_address(_address addr): _address {
		return addr >> $b;
	}
	procedure print_block(_address addr) {
		int w_idx = addr@word;
		addr = (addr >> $b) << $b;
		uint64 b_idx=addr@bank, p_idx=addr@page, l_idx=addr@block;
		printf("%s at %lld (bank: %lld, page: %lld, block: %lld)", name, addr, b_idx, p_idx, l_idx);
		for(int i=0; i<words_per_block; i++) {
			if(i%2==0) cout << " ";
			if(i%16==0) printf("\n0x%.010llx:  ", addr+i);
			#ifndef __WIN32__
			if(i == w_idx)
				printf("\033[1;32m%.02x\033[0;m", (bank[b_idx].page[p_idx].block[l_idx].word[i]));
			else
			#endif
				printf("%.02x", (bank[b_idx].page[p_idx].block[l_idx].word[i]));
		}
		cout << endl;
	}
end;

#endif