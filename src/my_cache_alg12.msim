#include "caches.msim"

//--------- for arc1---------
const int num_epoch = 100;
const int num_set = 2^11;
const int num_block = 7; 
const int num_LRblockSet = 1;
const int num_possibleMergeSet = 1; // or 2 // if it is possible to redirect more than one saturated block to another cold set!!
const int Low_Retentiont = 1;
const int High_Retentiont = 1;

int mapTable[num_set][num_block + 2]; // 2 bit for each set --> 1:set is merge source 2: set is merge destination
// one line of mapTable 
uint32 start_end_epoch_flags[100][3];
//--------- for arc1---------

module my_cache extends set_associative:
parameters 
	number_of_sets initially 128;
	associativity initially 8;	
	block_size initially 4;	
	use_coherency initially false;
	//access_latency initially 2n;
	low_access_latency initially 3ns;
	high_access_latency initially 4ns;
	
	energy_per_access initially 10pJ;
definitions
//----------- for observe --------------------------------------------
	uint32 max_cycle = 0;
	uint32 epoch_duration[100] = {0};
	//uint32 start_end_epoch_flags[100][3]= {0}; // age balayi tu constant ha kar nakard ba in kar kon
	int epoch_number = 0;
	uint64 total_cache_writes = 0;
	uint64 total_cache_reads = 0;

//--------- for arc1---------
	//int epoch_size_sec = 0;
	int epoch_size_cycle = 1000000;
	int warmUp_epochs = 10;    //first 10 mill cycle deleted --> 10 mill = 1 mill * 10
	int maxsatCounter_r = 31;  // define max of saturating counter  for read operation
	int maxsatCounter_w = 31;  // define max of saturating counter for write operation
	//int maxsatCounter_w2 = 31;  //if a block get saturated after the first time!!
 	//int number_LRblocks_set = 1;  // size of low retention time array or number of LR blocks in each set	
	uint64 LRblock_w_counter = 0; //total write in LRblock or HRblocks
	uint64 LRblock_r_counter = 0;
	uint64 HRblocks_w_counter = 0;
	uint64 HRblocks_r_counter = 0;
	uint32 min_dest_set_param1 = 0;
	uint32 min_dest_set_param2 = 0;
	uint32 selected_dest_set_idx = 0;
//----------------------------------------------------------	

architecture	
//---------------------  if LR array and HR array asumed to be in one cache  -----------
	record set[number_of_sets] merged
		record block[associativity] merged
//-------------------------- for observe ---------------------------------
			uint64 block_read_counter=0;
			uint64 block_write_counter=0;	
//-------------------------- for arc1 --> in each block ------------------------------
			uint64 block_read_sat_counter = 0;
			uint64 block_write_sat_counter = 0;
			//uint64 block_write_sat_counter2 = 0; // for mine
			//uint64 block_retention_time = 0;
		end;
//--------------------------- for arc1 --> in each set --------------------------------		
		// if in the last epoch duration a saturated block redirected to the LR-block in this set, this flag will be set
		int set_LRblock1_lock = 0; // checked at the start of epoch duration
		int set_LRblock2_lock = 0; // if there is more than one LR block in each set!!
		
		//each set has just one merge source set but could has 2 dest sets
		uint64 dest_set_index_1 = 0; // if this set HAS a merge destination set, I keep index of it in this variable/ checked during the epoch time interval
		uint64 source_set_index_1 = 0; // if this set IS a merge destination set, I keep index of its merge sourece set in this variable
		//uint64 dest_set_index_2 = 0; // if it is possible to redirect more than one saturated block to another cold set!!
		//uint64 source_set_index_2 = 0; // if there is more than one LRblock in set
		//uint64 source_set_firstOrsec_merge = 1;  //this variable indicates that the current merge dest set is the first merge destination or second	
    
		//uint32 mapTable[number_of_sets][associativity+2] = {0}; //age mapTable e constant balayi kar nakard ba in kar kon!! :D 
		
		// flags to identify first and second or third candidates for redirection to the LR-block in each set 
		int first_sat_block_in_set_flag = 0;  // if set_LRblock_lock = 1
		int second_sat_block_in_set_flag = 0; // if set_LRblock_lock = 0
		int third_sat_block_in_set_flag = 0; //if there is more than one LR-block in each set
		
		// block_index/tag of first and second saturated block in set
		uint64 saturated_w_block1_tag = 0; // checked during the epoch time interval
		uint64 saturated_w_block2_tag = 0;
		uint64 saturated_w_block3_tag = 0;
		uint64 saturated_w_block1_blockindex = 0;
		uint64 saturated_w_block2_blockindex = 0;
		uint64 saturated_w_block3_blockindex = 0;
		
		// counters for each set untill now(total and in each epoch)
		uint64 set_write_counter_epoch = 0;   // checked during the epoch time interval
		uint64 set_read_counter_epoch = 0;
		uint64 set_write_counter_total = 0;   // checked to select best merge destination set
		uint64 set_read_counter_total = 0;
		
		// number of saturated HR blocks in each set untill now(total and in each epoch)
		uint64 set_saturated_w_blocks_epoch = 0; // checked during the epoch time interval
		uint64 set_saturated_w_blocks_total = 0; // checked to select best merge destination set
		uint64 set_saturated_r_blocks_epoch = 0;
		uint64 set_saturated_r_blocks_total = 0;
		
		uint64 set_saturated_w_LRblocks_epoch = 0;  // increment number of saturated LR blocks in this set in current epoch duration
		uint64 set_saturated_w_LRblocks_total = 0;  // increment number of saturated LR blocks in this set UNTIL now
		uint64 set_saturated_r_LRblocks_epoch = 0;  // increment number of saturated LR blocks in this set in current epoch duration
		uint64 set_saturated_r_LRblocks_total = 0;  // increment number of saturated LR blocks in this set UNTIL now
						
		int set_LRblock1_currSet = 0;
		int set_LRblock1_otherSet = 0;
		//int set_LRblock2_currSet = 0;
		//int set_LRblock2_otherSet = 0;
												
		// if some block in destinaton set of this set get hot (saturated)  and this merge is the first redirection or second one
		//int dest_set_get_hot_flag_1 = 0; // checked at the end of epoch duration to break a merge
		//int dest_set_get_hot_flag_2 = 0;
		int first_intraSet_redirect_done = 0;
		int first_interSet_redirect_done = 0;
		
		// 2 flag for function contain and second search 
		int read_from_dest_set = 0;
		int write_on_dest_set = 0;
		//int LRblock_first_update_after_merge = 0;
		
		int dest_set_get_hot_flag = 0;
//-------------------------------------------------------------------------------		
	end;
/**
//---------------------  if LR array differ with the HR array in number of ways  -----------
	record set[number_of_sets] merged
		//record block[associativity] merged
		record block_HR[associativity] merged
//---------------------  redundancy  for each way or block  --------------------------------------
			uint64 read_counter=0;
			uint64 write_counter=0;	
//---------------------  if LR array has the same number of set  --------------------------------------		
		record block_LR[associativity] merged
//---------------------  redundancy  for each way or block  --------------------------------------
			uint64 read_counter=0;
			uint64 write_counter=0;	
//-----------------------------------------------------------
		end;
	end;
	
//---------------------  if LR array differ with the HR array in number of sets and way  -----------
//	record set_LR[number_of_sets] merged
//		record block_LR[associativity] merged
//---------------------  redundancy  for each way or block  --------------------------------------
//			uint64 read_counter=0;
//			uint64 write_counter=0;	
//-----------------------------------------------------------		
//		end;
//	end;
//------------------------------------------------------------
*/
implementation
 //***************************************************************   SetmapTable functions  ************************************************************
 
	function get_set_index(int set_i , int block_i): int {
		
		if(set_i == mapTable[set_i][block_i])
		{
			return set_i;
		}else
		{
			return mapTable[set_i][block_i];
		}
	}
	
	function get_block_index(int set_i , int block_i): int {
		
		if(set_i == mapTable[set_i][block_i])
		{
			return block_i; // check the block_index ****block_i***** of current set!
		}else
		{
			return 0; // check the block_index **** 0 **** of merge destination set !
		}
	}
	
//***************************************************************    contains    ************************************************************	
	function contains(_address addr): bool {

		for(int i=0 ; i<associativity ; i++) {
			//search 1
			if(addr@tag == set[addr@set].block[i].tag && set[addr@set].block[i].valid) {
			//if(addr@tag == set[get_set_index(addr@set,i)].block[get_block_index(addr@set,i)].tag && set[get_set_index(addr@set,i)].block[get_block_index(addr@set,i)].valid) {
				
				block_index = i;
				trace(0x0A, "trying to access %s at %llX to %s is HIT", name, addr, ((access_type == ttDataWrite)?"WRITE ON":"READ FROM"));
				whenever(use_coherency) 
					coherency_check(addr); 
				return true;
			}
			//search 2
			if(set[addr@set].first_interSet_redirect_done == 1)
			{
				//if(addr@tag == set[addr@set].block[i].tag && set[addr@set].block[i].valid) {
				if(addr@tag == set[get_set_index(addr@set,i)].block[get_block_index(addr@set,i)].tag && set[get_set_index(addr@set,i)].block[get_block_index(addr@set,i)].valid) {
					
					//block_index = i;
					block_index = get_block_index(addr@set,i); // block index  0 of merge destination set 
					
					if(access_type == ttDataRead)
					{
						set[addr@set].read_from_dest_set = 1; //just for read access..read from addr@set or get_set_index(addr@set,i) 
					}
					if(access_type == ttDataWrite)
					{
						set[addr@set].write_on_dest_set = 1; //just for read access..write on  addr@set or get_set_index(addr@set,i) 
					}
					
					
					//_address a = (set_idx << ($w)) + (set[set_idx].block[block_index].tag << ($d+$w));
					trace(0x0A, "trying to access %s at %llX to %s is HIT", name, addr, ((access_type == ttDataWrite)?"WRITE ON":"READ FROM"));
					whenever(use_coherency) 
						coherency_check(addr); 
					return true;
				}
			}//end if(set[addr@set].first_interSet_redirect_done == 1)	
		}//end for 
		
		trace(0x0C, "trying to access %s at %llX to %s is MISSED", name, addr, ((access_type == ttDataWrite)?"WRITE ON":"READ FROM"));
		whenever(use_coherency) {
			if (access_type != ttDataWrite) {
				trace(0x0C, "searching other states...");
				int other = dir.exists(addr, MODIFIED);
				if (other == -1) other = dir.exists(addr, OWNED);
				if (other == -1) other = dir.exists(addr, EXCLUSIVE);
				if (other == -1) other = dir.exists(addr, SHARED);
				if (other  > -1 && other != cache_index) {
					block_index = search(addr);
					if(set[addr@set].block[block_index].dirty) {
						prev_level.write_block(addr, set[addr@set].block[block_index].word, block_size);
					}
					dir.read_from_other_cache(other, addr, set[addr@set].block[block_index].word, block_size);
					dir.broadcast_block(addr, set[addr@set].block[block_index].word, block_size);
					dir.set_state(addr, cache_index, SHARED);	
					return true;
				}
			}
			dir.set_state(addr, cache_index, EXCLUSIVE);
		}
		return false;
	}

//***************************************************************    search    ************************************************************
	function search(_address addr): int {
		
		int index = -1;
		for( int j=0; j<associativity; j++) {
		
			if(!set[addr@set].block[j].valid) {
			//if(!set[get_set_index(addr@set,j)].block[get_block_index(addr@set,j)].valid) { // for alg12 but is not necessory
				return j;
			}
		}
		uint32 max=0;
		for( int j=0; j<associativity; j++) {
		
			if(set[addr@set].block[j].counter>max) {
			//if(set[get_set_index(addr@set,j)].block[get_block_index(addr@set,j)].counter>max) {	// for alg12 but is not necessory
				index=j;
				max=set[addr@set].block[j].counter;
				//max= set[get_set_index(addr@set,j)].block[get_block_index(addr@set,j)].counter;  // for alg12 but is not necessory
			}
		}
		if(index == -1) return 0;
		return index;
	}

//***************************************************************    evict     ************************************************	
	procedure evict(int set_idx, int block_idx) {
		trace("writing back block %d of set %lld of %s on %s ...", block_idx, set_idx, name, prev_level.name);
		_address a = (set_idx << ($w)) + (set[set_idx].block[block_idx].tag << ($d+$w));
		if(sim_step >= offset) evictions++;
		prev_level.write_block(a, set[set_idx].block[block_idx].word, block_size);
	}
//***************************************************************    update     ************************************************

	procedure update(_address addr, int block_idx) {
		_data temp[block_size];
		prev_level.read_block(addr, temp, block_size);
		write_block(addr, temp, block_size);
		set[addr@set].block[block_idx].dirty = false;
		//set[get_set_index(addr@set,j)].block[get_block_index(addr@set,j)].dirty = false;
	}
//***************************************************************    replace    ************************************************
	procedure replace(_address addr) {
		block_index = search(addr);
		int block_idx = block_index;
		int set_idx = addr@set;
		//int set_idx = set[get_set_index(addr@set,j)];
		addr = (addr >> $w) << $w; 
		if(set[set_idx].block[block_idx].dirty && set[set_idx].block[block_idx].valid) 
			evict(set_idx, block_idx);
		set[set_idx].block[block_idx].tag = addr@tag;
		set[set_idx].block[block_idx].valid = true;
		set[set_idx].block[block_idx].counter = 0;
		set[set_idx].block[block_idx].dirty = false;
		if(access_type == ttDataRead) 
			update(addr, block_idx);
		block_index = block_idx;
	}
//***************************************************************    write_block    ************************************************************	
	procedure write_block(_address addr, _data* src_block, uint32 size) serial slip
	//~latency(access_latency) ~energy(energy_per_access) {
//-------------------------------------- for arc1  -----------------------------------------------------------------
	~latency( (block_index == 1) ? low_access_latency : high_access_latency)  ~energy(energy_per_access) {
		
		trace("reading a block of %ld word(s) from %s at %lld ...", size, name, addr);
//-----------------------------------------  for arc1 ------------------------------------------------------
		
		//int set_idx = addr@set;
		int set_idx = 0;
		if(addr@set == mapTable[addr@set][block_index])
		{
			set_idx = addr@set;
		}else
		{
			if(set[addr@set].write_on_dest_set == 1 && block_index == 0) // if function contain find the addr in second search  
			{
				set_idx = mapTable[addr@set][block_index];
				set[addr@set].write_on_dest_set = 0;
				
			}else
			{
				set_idx = addr@set;
			}
		}
//-------------------------------------------------------------------------------------------------------------
		
		for(int k=0;k<associativity ;k++) {
			set[set_idx].block[k].counter++;
		}
		set[set_idx].block[block_index].counter = 0;
		set[set_idx].block[block_index].dirty = true;
		int start = addr@word;
		for (int i=0; i<size; i++) {
			if(i+start == block_size) {
				write_block(addr+i, src_block, size-i);
				return;
			}
			set[set_idx].block[block_index].word[i+start] = src_block[i];
		}
//-----------------------------------------  for observe ------------------------------------------------------
		//rw_counter[addr@set ,block_index, 2 ]++;
		total_cache_writes++;
		set[set_idx].block[block_index].block_write_counter++;
//-----------------------------------------  for arc1  --------------------------------------------------------------
		/**
		if(block_index == 1)
		{
			if(set[set_idx].LRblock_first_update_after_merge == 0 && set[set_idx].set_LRblock1_otherSet == 1)
			{					
				set[set_idx].LRblock_first_update_after_merge = 1;
			}else
			{
				set[set_idx].LRblock_first_update_after_merge = 0;
			}
		}
		**/
		set[set_idx].set_write_counter_total++; // increment the number of write operations in set after the block get saturated
		set[set_idx].set_write_counter_epoch++;
		
		int flag_satCounter = 0;
		if(set[set_idx].block[block_index].block_write_sat_counter < maxsatCounter_w) //if the block is not saturated
		{
			set[set_idx].block[block_index].block_write_sat_counter++;  //increment saturating counter of block
			flag_satCounter = 1;
		}
		
		if(set[set_idx].block[block_index].block_write_sat_counter == maxsatCounter_w && flag_satCounter == 1) // if a block saturated!!
		{ 
			/**
			if(set[set_idx].block[block_index].block_write_sat_counter2 < maxsatCounter_w2) //if the block is not saturated
			{
				set[set_idx].block[block_index].block_write_sat_counter2++; 
			}**/
			set[set_idx].block[block_index].block_write_sat_counter = 0;    //reset the saturating counter of block
			
			if(num_LRblockSet == 1) // set the flags for saturated blocks in set
			{
				if(block_index != 1)
				{
					if(set[set_idx].first_sat_block_in_set_flag == 0 && set[set_idx].first_intraSet_redirect_done == 0)
					{	
						set[set_idx].first_sat_block_in_set_flag = 1;
						set[set_idx].set_saturated_w_blocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
						set[set_idx].set_saturated_w_blocks_total++;  // increment number of saturated blocks in this set UNTIL now
						
						//this block is the first saturated block in set in current epoch duration
						set[set_idx].saturated_w_block1_tag = set[set_idx].block[block_index].tag;  // save the tag of first hot block
						set[set_idx].saturated_w_block1_blockindex = block_index;
						
						if(mapTable[set_idx][num_block + 2] == 1)  //if this set is a merge destination for other sets and now its *** FIRST *** saturated block need to be in its LRblock, so the merge should break, we set a flag for this aim! 
						{
							/**
							if(set[set_idx].source_set_firstOrsec_merge == 1)
							{
								set[set[set_idx].source_set_index].dest_set_get_hot_flag_1 = 1;
							}
							if(set[set_idx].source_set_firstOrsec_merge == 2)
							{
								set[set[set_idx].source_set_index].dest_set_get_hot_flag_2 = 1;
							}
							*/
							set[set[set_idx].source_set_index_1].dest_set_get_hot_flag = 1;
						}
						
					}else if(set[set_idx].first_sat_block_in_set_flag == 1 && set[set_idx].second_sat_block_in_set_flag == 0 && set[set_idx].first_interSet_redirect_done == 0)
					{	
						set[set_idx].second_sat_block_in_set_flag = 1;
						set[set_idx].set_saturated_w_blocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
						set[set_idx].set_saturated_w_blocks_total++;  // increment number of saturated blocks in this set UNTIL now
						
						set[set_idx].saturated_w_block2_tag = set[set_idx].block[block_index].tag;  // save the tag of second hot block
						set[set_idx].saturated_w_block2_blockindex = block_index;
						
						
						if(mapTable[set_idx][num_block + 2] == 1)  //if this set is a merge destination for other sets and now its *** SECOND *** saturated block need to be in its LRblock, so the merge should break, we set a flag for this aim! 
						{
							set[set[set_idx].source_set_index_1].dest_set_get_hot_flag = 1;
						}
						
					}else if(set[set_idx].first_sat_block_in_set_flag == 1 && set[set_idx].second_sat_block_in_set_flag == 1)
					{	
						set[set_idx].third_sat_block_in_set_flag = 1;
						set[set_idx].set_saturated_w_blocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
						set[set_idx].set_saturated_w_blocks_total++;  // increment number of saturated blocks in this set UNTIL now
						
						set[set_idx].saturated_w_block3_tag = set[set_idx].block[block_index].tag;  // save the tag of second hot block
						set[set_idx].saturated_w_block3_blockindex = block_index;
						
						if(mapTable[set_idx][num_block + 2] == 1)  //if this set is a merge destination for other sets and now its *** SECOND *** saturated block need to be in its LRblock, so the merge should break, we set a flag for this aim! 
						{
							set[set[set_idx].source_set_index_1].dest_set_get_hot_flag = 1;
						}
						
					//if the saturated block is not one of the first 3 blocks which get saturated	
					}else
					{
						set[set_idx].set_saturated_w_blocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
						set[set_idx].set_saturated_w_blocks_total++;  // increment number of saturated blocks in this set UNTIL now
					}
				// if the saturated block is the LR block in set
				}else
				{
					set[set_idx].set_saturated_w_LRblocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
					set[set_idx].set_saturated_w_LRblocks_total++;  // increment number of saturated blocks in this set UNTIL now
						
				}//end if(block_index != 1)

			} //if(number_LRblocks_set == 1)
		} //end  if a block saturated!!
//-------------------------------------------------------------------------------------------------------
}//end write_block

//***************************************************************     read_block     ************************************************************
	
	procedure read_block(_address addr, _data* dst_block, uint32 size) serial slip 
//-------------------------------------- for arc1  -----------------------------------------------------------------
	//~latency(access_latency) ~energy(energy_per_access)  {
	~latency( (block_index == 1) ? low_access_latency : high_access_latency) ~energy(energy_per_access)  {
		
		trace("reading a block of %ld word(s) from %s at %lld ...", size, name, addr);
//-----------------------------------     for alg12     ----------------------------
		//int set_idx = addr@set;
		int set_idx = 0; // this is for decleration in this scope!! for one error
		//redirection 2 (merge set)
		if(addr@set == mapTable[addr@set][block_index])
		{
			set_idx = addr@set;
		}else
		{
			if(set[addr@set].read_from_dest_set == 1 && block_index == 0) // if function contain find the addr in second search  
			{
				set_idx = mapTable[addr@set][block_index];
				set[addr@set].read_from_dest_set = 0;
				
			}else
			{
				set_idx = addr@set;
			}
		}
//-----------------------------------------------------------------------------------
		for(int k=0;k<associativity ;k++) {
			set[set_idx].block[k].counter++;
		}
		set[set_idx].block[block_index].counter = 0;
		int start = addr@word;
		for (int i=0; i<size; i++) {
			if(i+start == block_size) {
				read_block(addr+i, dst_block, size-i);
				return;
			}
			dst_block[i] = set[set_idx].block[block_index].word[i+start];
		}
//--------------------------------------------  for observe ---------------------------------------------------
		//rw_counter[addr@set ,block_index, 2 ]++;
		total_cache_reads++;
		set[set_idx].block[block_index].block_read_counter++;
		
//-----------------------------------------  for al12  --------------------------------------------------------------
		set[set_idx].set_read_counter_total++; // increment the number of read operations in set after the block get saturated
		set[set_idx].set_read_counter_epoch++;
		
		int flag_satCounter = 0;
		if(set[set_idx].block[block_index].block_read_sat_counter < maxsatCounter_r) //if the block is not saturated
		{
			set[set_idx].block[block_index].block_read_sat_counter++;  //increment saturating counter of block
			flag_satCounter = 1;
		}
		
		if(set[set_idx].block[block_index].block_read_sat_counter == maxsatCounter_r && flag_satCounter == 1) // if a block saturated!!
		{ 
			/**
			if(set[set_idx].block[block_index].block_write_sat_counter2 < maxsatCounter_w2) //if the block is not saturated
			{
				set[set_idx].block[block_index].block_write_sat_counter2++; 
			}**/
			set[set_idx].block[block_index].block_read_sat_counter = 0;    //reset the saturating counter of block
			
			if(num_LRblockSet == 1) // set the flags for saturated blocks in set
			{
				if(block_index != 1)
				{
						set[set_idx].set_saturated_r_blocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
						set[set_idx].set_saturated_r_blocks_total++;  // increment number of saturated blocks in this set UNTIL now
					
				// if the saturated block is the LR block in set
				}else
				{
					set[set_idx].set_saturated_r_LRblocks_epoch++;  // increment number of saturated blocks in this set in current epoch duration
					set[set_idx].set_saturated_r_LRblocks_total++;  // increment number of saturated blocks in this set UNTIL now
						
				}	
			} //nd if(num_LRblockSet == 1)
		}//end if a block saturated!!
}//end read_block

//***************************************************************         report      ************************************************************
	procedure report {
	
		long double total = read_miss+read_hit+write_hit+write_miss;
		if(total > 0)
		{
			printf("%s.hit-rate = %.2f%%\n", name, (float)((long double)(write_hit+read_hit)/total*100));
		}
//------------------------------------------  report for observation 1 --------------------------------------------------------------------		
		/**
		//printf("\n\n********************************************\n");
		//printf("cache : %s \ntotal cache reads = %lld\ntotal cache writes = %lld\n",name, total_cache_reads, total_cache_writes);
		//printf("\n\n\n\n********************************************\n");
		
		//reporting number of writes in each set 
		//printf("*****************    writes     *****************\n");
		for(int k=0; k < number_of_sets ;k++) 
		{	
			//printf("\n\n\n\nAccess to set %d from %s --->\n", k, name);
			printf("\n");
			for(int l=0; l < associativity ;l++) 
			{
					//printf("  %lld/%lld   ", set[k].block[l].read_counter, set[k].block[l].write_counter);
					printf("%lld ",set[k].block[l].block_write_counter);
			}	
		}
		
		// reporting number of reads in each set 
		//printf("\n\n*****************    reads     *****************\n");
		for(int k=0; k < number_of_sets ;k++) 
		{
			//printf("\n\n\n\nAccess to set %d from %s --->\n", k, name);
			printf("\n");
			for(int l=0; l < associativity ;l++) 
			{
					printf("%lld ",set[k].block[l].block_read_counter);
			}	
		}
		**/
//--------------------------------------- report for arc1 -----------------------------------------------------------------------				
		//printf("\n\n********************************************\n");
		//printf("cache : %s \ntotal cache reads = %lld\ntotal cache writes = %lld\n",name, total_cache_reads, total_cache_writes);
		//printf("\n\n\n\n********************************************\n");
		
		//reporting number of writes in each set 
		//printf("*****************    writes     *****************\n");
		for(int k=0; k < number_of_sets ;k++) 
		{	
			//printf("\n\n\n\nAccess to set %d from %s --->\n", k, name);
			printf("\n");
			for(int l=0; l < num_block ;l++) 
			{
					//printf("  %lld/%lld   ", set[k].block[l].read_counter, set[k].block[l].write_counter);
					printf("%lld ",set[k].block[l].block_write_counter);
			}	
		}
		
		// reporting number of reads in each set 
		//printf("\n\n*****************    reads     *****************\n");
		for(int k=0; k < number_of_sets ;k++) 
		{
			//printf("\n\n\n\nAccess to set %d from %s --->\n", k, name);
			printf("\n");
			for(int l=0; l < num_block ;l++) 
			{
					printf("%lld ",set[k].block[l].block_read_counter);
			}	
		}
		
		//-----------------------------------------------------------------------
		for(int k=0; k < number_of_sets ;k++) 
		{
			// sum of reads and writes in HR blocks in all sets in all epochs
			for(int l=1; l < associativity ;l++) 
			{
					LRblock_w_counter = LRblock_w_counter + set[k].block[l].block_write_counter;
					LRblock_r_counter = LRblock_r_counter + set[k].block[l].block_read_counter;
					//printf("%lld ",set[k].block[l].block_read_counter);
			}	
			// sum of reads and writes in LR block in all sets in all epochs
			HRblocks_w_counter = HRblocks_w_counter + set[k].block[1].block_write_counter;
			HRblocks_r_counter = HRblocks_r_counter + set[k].block[1].block_read_counter;
		}
		printf("\n\n\n\nNumber of writes in HR block of cache %s is ---> %lld\n",name, HRblocks_w_counter);
		printf("\n\n\n\nNumber of reads in HR block of cache %s is ---> %lld\n",name, HRblocks_r_counter);
		printf("\n\n\n\nNumber of writes in LR block of cache %s is ---> %lld\n",name, LRblock_w_counter);
		printf("\n\n\n\nNumber of reads in LR block of cache %s is ---> %lld\n",name, LRblock_r_counter);		
//--------------------------------------------------------------------------------------------------------------		
	}//end of report()
	
end;//end of my_cache
